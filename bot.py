import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from dotenv import load_dotenv
import openai
import random

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡¶∏‡ßç‡¶¨‡¶∞‡ßÇ‡¶™ ‡¶ú‡ßã‡¶ï‡¶∏ ‡¶ì ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá‡¶∞ ‡¶ï‡¶¨‡¶ø‡¶§‡¶æ
jokes = [
    "‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï: ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶¨ ‡¶õ‡¶æ‡¶°‡¶º‡¶§‡ßá ‡¶∞‡¶æ‡¶ú‡¶ø ‡¶Ü‡¶õ‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï‡¶æ: ‡¶∏‡¶§‡ßç‡¶Ø‡¶ø? ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï: ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å‡•§ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï‡¶æ: ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶¶‡¶æ‡¶ì!",
    "‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï‡¶æ: ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶ø‡¶Ø‡¶º‡ßá ‡¶π‡¶Ø‡¶º ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∏‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶ü ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶¶‡¶ø‡¶¨‡ßá? ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï: ‡¶ì‡¶ï‡ßá‡•§ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï‡¶æ: ‡¶°‡ßç‡¶∞‡¶ø‡¶Ç‡¶ï‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶ì ‡¶®‡¶æ‡•§ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï: ‡¶ì‡¶ï‡ßá‡•§ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï‡¶æ: ‡¶®‡¶æ‡¶á‡¶ü ‡¶ï‡ßç‡¶≤‡¶æ‡¶¨‡ßá‡¶ì ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡¶æ‡•§ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï: ‡¶ì‡¶ï‡ßá‡•§ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï‡¶æ: ‡¶Ü‡¶∞ ‡¶ï‡¶ø ‡¶¨‡¶æ‡¶ï‡ßÄ ‡¶Ü‡¶õ‡ßá ‡¶Ø‡¶æ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶¶‡¶ø‡¶¨‡ßá? ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï: ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá!"
]

love_poems = [
    "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ö‡ßã‡¶ñ‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶π‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶á, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶π‡¶æ‡¶∏‡¶ø‡¶§‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶Å‡¶ö‡¶ø‡•§",
    "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶™‡¶æ‡¶ó‡¶≤, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶Æ‡¶ø ‡¶Æ‡ßÅ‡¶ó‡ßç‡¶ß‡•§"
]

love_stories = [
    "‡¶è‡¶ï ‡¶ï‡¶æ‡¶™ ‡¶ï‡¶´‡¶ø: ‡¶è‡¶ï ‡¶∏‡¶ï‡¶æ‡¶≤‡ßá ‡¶ï‡¶´‡¶ø ‡¶∂‡¶™‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶π‡¶≤‡ßã ‡¶§‡¶æ‡¶¶‡ßá‡¶∞, ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶≤‡ßã ‡¶è‡¶ï ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá‡¶∞ ‡¶ó‡¶≤‡ßç‡¶™‡•§",
    "‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶§‡ßá ‡¶´‡ßá‡¶∞‡¶æ: ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶¶‡¶ø‡¶®‡ßá ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï-‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶π‡¶†‡¶æ‡ßé ‡¶¶‡ßá‡¶ñ‡¶æ, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ú‡ßá‡¶ó‡ßá ‡¶â‡¶†‡¶≤‡ßã ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶Ö‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø‡•§"
]

# AI ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶ú‡¶¨‡¶æ‡¶¨
async def ai_response(message: str) -> str:
    prompt = f"‡¶è‡¶ï‡¶ú‡¶® ‡¶Æ‡¶ú‡¶æ‡¶∞, ‡¶∞‡ßã‡¶Æ‡¶æ‡¶®‡ßç‡¶ü‡¶ø‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶æ‡¶® AI ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡ßü ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶æ‡¶ì:\n\n‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: {message}\n‡¶â‡¶§‡ßç‡¶§‡¶∞:"
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üòÇ ‡¶ú‡ßã‡¶ï‡¶∏", callback_data='joke')],
        [InlineKeyboardButton("üíñ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá‡¶∞ ‡¶ï‡¶¨‡¶ø‡¶§‡¶æ", callback_data='poem')],
        [InlineKeyboardButton("üìñ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá‡¶∞ ‡¶ó‡¶≤‡ßç‡¶™", callback_data='story')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶π‡¶æ‡¶∏‡¶ø-‡¶Æ‡¶ú‡¶æ ‡¶Ü‡¶∞ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá‡¶∞ ‡¶ó‡¶≤‡ßç‡¶™‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßÄ‡•§ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶æ‡¶ì:", reply_markup=reply_markup)

# ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'joke':
        await query.edit_message_text(text=random.choice(jokes))
    elif query.data == 'poem':
        await query.edit_message_text(text=random.choice(love_poems))
    elif query.data == 'story':
        await query.edit_message_text(text=random.choice(love_stories))

# ‡¶∏‡¶¨ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶∏‡ßá‡¶ú‡ßá ‡¶ú‡¶¨‡¶æ‡¶¨
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    reply = await ai_response(user_message)
    await update.message.reply_text(reply)

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling()
